{"version":3,"sources":["pnc-ui-extras/pnc-ui-extras.module.js","pnc-ui-extras/combobox/combobox.module.js","pnc-ui-extras/combobox/combobox.component.js","pnc-ui-extras/combobox/expressionParser.factory.js","pnc-ui-extras/combobox/px-expression.directive.js","pnc-ui-extras/ui-breadcrumbs/uiBreadcrumbs.js","templates.js"],"names":["angular","module","ComboboxController","$log","$scope","$element","$timeout","DEFAULT_OPTION_TEMPLATE_URL","options","showDropDown","modelOptions","optionTemplateUrl","ngModel","editable","$parsers","push","option","getOptionFromViewValue","viewValue","isDefined","getModelValue","$validators","isValidOption","modelValue","getOptionFromModelValue","$render","inputModel","$viewValue","$formatters","transformed","getViewValue","$watch","$setViewValue","loadOptions","debounceMs","debounce","parseInt","find","on","$applyAsync","$setTouched","off","pxExpression","getOptions","then","debug","$id","isArray","value","highlighted","undefined","setShowDropDown","closeDropDown","index","length","isUndefined","setHighlighted","$event","stopPropagation","preventDefault","key","highlightNext","openDropDown","highlightPrevious","select","$inject","pxCombobox","templateUrl","controller","require","bindings","placeholder","component","pxExpressionParser","$parse","TYPEAHEAD_REGEXP","parse","input","match","Error","itemName","source","viewMapper","modelMapper","factory","PxExpressionController","$q","$attrs","parsed","item","locals","when","restrict","scope","directive","moduleName","err","$interpolate","$state","$transitions","elem","attrs","displaynameProperty","abstractProxyProperty","link","updateBreadcrumbsArray","workingState","displayName","breadcrumbs","currentState","$current","name","getWorkingState","getDisplayName","stateAlreadyInBreadcrumbs","route","parent","reverse","proxyStateName","abstract","getObjectValue","copy","get","interpolationContext","propertyReference","transition","getResolveTokens","forEach","token","isString","startsWith","injector","objectPath","context","i","propertyArray","split","state","alreadyUsed","onSuccess","_transition","run","$templateCache","put"],"mappings":"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","file":"pnc-ui-extras.min.js","sourcesContent":["angular.module('pnc-ui-extras', [\n  'pnc-ui-extras.templates',\n  'pnc-ui-extras.combobox',\n  'pnc-ui-extras.uiBreadcrumbs'\n]);\n\nangular.module('pnc-ui-extras.templates', []);\n","angular.module('pnc-ui-extras.combobox', [\n  'pnc-ui-extras.templates'\n]);\n","class ComboboxController {\n\n  constructor($log, $scope, $element, $timeout) {\n    const DEFAULT_OPTION_TEMPLATE_URL = 'pnc-ui-extras/combobox/combobox-option.template.html';\n\n    this.$log = $log;\n    this.$scope = $scope;\n    this.$element = $element;\n    this.$timeout = $timeout;\n\n    this.options = []; // List of options for the user to select from\n    this.showDropDown = false;\n    this.modelOptions = {}; // Values for ng-model-options directive\n    this.optionTemplateUrl = this.optionTemplateUrl || DEFAULT_OPTION_TEMPLATE_URL;\n  }\n\n  $onInit() {\n    if (this.ngModel) {\n      const editable = this.editable === true || this.editable === 'true';\n\n      this.ngModel.$parsers.push(viewValue => {\n        const option = this.getOptionFromViewValue(viewValue);\n\n        if (angular.isDefined(option)) {\n          return this.getModelValue(option);\n        } else if (editable) {\n          return viewValue;\n        }\n      });\n\n      this.ngModel.$validators.isValidOption = (modelValue, viewValue) => {\n        return angular.isDefined(this.getOptionFromModelValue(modelValue)) || editable;\n      };\n\n      this.ngModel.$render = () => this.inputModel = this.ngModel.$viewValue;\n\n      this.ngModel.$formatters.push(modelValue => {\n        const transformed = this.getViewValue(modelValue);\n\n        if (angular.isDefined(transformed)) {\n          return transformed;\n        }\n\n        const option = this.getOptionFromModelValue(modelValue);\n\n        if (angular.isDefined(option)) {\n          return this.getViewValue(option);\n        } else if (editable) {\n          return modelValue;\n        }\n      });\n\n      this.$scope.$watch(\n        () => this.inputModel,\n        () => {\n          this.ngModel.$setViewValue(this.inputModel);\n          this.loadOptions(this.inputModel);\n        }\n      );\n\n      if (this.debounceMs) {\n        this.modelOptions.debounce = parseInt(this.debounceMs);\n      }\n\n    } else {\n      this.loadOptions();\n    }\n  }\n\n  $postLink() {\n    if (this.ngModel) {\n      this.$timeout(() => {\n        this.$element.find('input').on('blur', () => {\n          this.$scope.$applyAsync(() => this.ngModel.$setTouched());\n        });\n      });\n    }\n  }\n\n  $onDestroy() {\n    if (this.ngModel) {\n      this.$element.find('input').off('blur');\n    }\n  }\n\n  loadOptions(viewValue) {\n    return this.pxExpression.getOptions(viewValue).then(options => {\n      this.$log.debug('ComboboxController::loadOptions() scopeId = %d | options = %O', this.$scope.$id, options);\n      this.$scope.$applyAsync(() => this.options = options);\n      return options;\n    });\n  }\n\n  getViewValue(option) {\n    return this.pxExpression.getViewValue(option);\n  }\n\n  getModelValue(option) {\n    return this.pxExpression.getModelValue(option);\n  }\n\n  getOptionFromViewValue(viewValue) {\n    if (!angular.isArray(this.options)) {\n      return;\n    }\n    return this.options.find(option => this.getViewValue(option) === viewValue);\n  }\n\n  getOptionFromModelValue(modelValue) {\n    if (!angular.isArray(this.options)) {\n      return;\n    }\n    if (this.getViewValue(modelValue)) {\n      return modelValue;\n    }\n    return this.options.find(option => this.getModelValue(option) === modelValue);\n  }\n\n  setShowDropDown(value) {\n    this.$scope.$applyAsync(() => this.showDropDown = value);\n    if (!value) {\n      this.highlighted = undefined;\n    }\n  }\n\n  openDropDown() {\n    this.setShowDropDown(true);\n  }\n\n  closeDropDown() {\n    this.setShowDropDown(false);\n  }\n\n  toggleDropDown() {\n    this.setShowDropDown(!this.showDropDown);\n  }\n\n  select(option) {\n    this.inputModel = this.getViewValue(option);\n    this.closeDropDown();\n  }\n\n  clear() {\n    this.inputModel = undefined;\n    this.closeDropDown();\n  }\n\n  setHighlighted(index) {\n    this.highlighted = index;\n  }\n\n  isHighlighted(index) {\n    return this.highlighted === index;\n  }\n\n  highlightNext() {\n    if (!this.showDropDown || !this.options || this.options.length < 1) {\n      return;\n    }\n\n    if (angular.isUndefined(this.highlighted)) {\n      this.setHighlighted(0);\n    } else if (this.highlighted === this.options.length - 1) {\n      return;\n    } else {\n      this.setHighlighted(this.highlighted + 1);\n    }\n  }\n\n  highlightPrevious() {\n    if (!this.showDropDown || !this.options || this.options.length < 1) {\n      return;\n    }\n\n    if (angular.isUndefined(this.highlighted) || this.highlighted === 0) {\n      return;\n    } else {\n        this.setHighlighted(this.highlighted - 1);\n    }\n  }\n\n  onKey($event) {\n    $event.stopPropagation();\n    $event.preventDefault();\n    switch ($event.key) {\n      case 'ArrowDown':\n        if (!this.showDropDown) {\n          this.openDropDown();\n        } else {\n          this.highlightNext();\n        }\n        break;\n      case 'ArrowUp':\n        this.highlightPrevious();\n        break;\n      case 'Enter':\n        this.select(this.options[this.highlighted]);\n        break;\n      case 'Escape':\n        this.closeDropDown();\n        break;\n    }\n  }\n}\n\nComboboxController.$inject = ['$log', '$scope', '$element', '$timeout'];\n\nconst pxCombobox = {\n  templateUrl: 'pnc-ui-extras/combobox/combobox.template.html',\n  controller: ComboboxController,\n  require: {\n    pxExpression: '?pxExpression',\n    ngModel: '?ngModel'\n  },\n  bindings: {\n    placeholder: '@',\n    editable: '<',\n    debounceMs: '@',\n    optionTemplateUrl: '@'\n  }\n};\n\nangular.module('pnc-ui-extras.combobox')\n       .component('pxCombobox', pxCombobox);\n","/**\n * The work in this file is entirely the work of the AngularUI team, with only\n * extremely minor of modifications. Copyright attribution and license:\n *\n * The MIT License\n *\n * Copyright (c) 2012-2017 the AngularUI Team, https://github.com/organizations/angular-ui/teams/291112\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nconst pxExpressionParser = ($parse) => {\n  const TYPEAHEAD_REGEXP = /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?\\s+for\\s+(?:([\\$\\w][\\$\\w\\d]*))\\s+in\\s+([\\s\\S]+?)$/;\n   return {\n     parse: (input) => {\n       let match = input.match(TYPEAHEAD_REGEXP);\n       if (!match) {\n         throw new Error(\n           'Expected typeahead specification in form of \"_modelValue_ (as _label_)? for _item_ in _collection_\"' +\n             ' but got \"' + input + '\".');\n       }\n\n       return {\n         itemName: match[3],\n         source: $parse(match[4]),\n         viewMapper: $parse(match[2] || match[1]),\n         modelMapper: $parse(match[1])\n       };\n     }\n   };\n };\n\npxExpressionParser.$inject = ['$parse'];\n\nangular.module('pnc-ui-extras.combobox')\n       .factory('pxExpressionParser', pxExpressionParser);\n","class PxExpressionController {\n  constructor($log, $q, $scope, $attrs, pxExpressionParser) {\n    this.$log = $log;\n    this.$q = $q;\n    this.$scope = $scope;\n    this.$attrs = $attrs;\n    this.pxExpressionParser = pxExpressionParser;\n\n    this.parsed = pxExpressionParser.parse($attrs.pxExpression);\n\n    this.$log.debug('PxExpressionController::constructor() with scope id = ' + $scope.$id);\n    this.$log.debug('px-expression = ' + $attrs.pxExpression, $scope);\n  }\n\n  getViewValue(item) {\n    let locals = {};\n    locals[this.parsed.itemName] = item;\n    return this.parsed.viewMapper(this.$scope, locals);\n  }\n\n  getModelValue(item) {\n    let locals = {};\n    locals[this.parsed.itemName] = item;\n    return this.parsed.modelMapper(this.$scope, locals);\n  }\n\n  getOptions(viewValue) {\n    return this.$q.when(this.parsed.source(this.$scope, { $viewValue: viewValue }));\n  }\n}\n\nPxExpressionController.$inject = ['$log', '$q', '$scope', '$attrs', 'pxExpressionParser'];\n\n\nconst pxExpression = () => {\n  return {\n    restrict: 'A',\n    scope: false,\n    controller: PxExpressionController,\n  };\n};\n\nangular.module('pnc-ui-extras.combobox')\n       .directive('pxExpression', pxExpression);\n","// jshint ignore:start\n//\n// CUSTOMIZED IMPLEMENTATION TO MAKE IT COMPATIBLE WITH ui-router 1.0\n//\n/**\n * uiBreadcrumbs automatic breadcrumbs directive for AngularJS & Angular ui-router.\n *\n * https://github.com/michaelbromley/angularUtils/tree/master/src/directives/uiBreadcrumbs\n *\n * Copyright 2014 Michael Bromley <michael@michaelbromley.co.uk>\n */\n\n\n(function() {\n\n    /**\n     * Config\n     */\n    var moduleName = 'pnc-ui-extras.uiBreadcrumbs';\n    var templateUrl = 'pnc-ui-extras/ui-breadcrumbs/uiBreadcrumbs.tpl.html';\n\n    /**\n     * Module\n     */\n    var module;\n    try {\n        module = angular.module(moduleName);\n    } catch(err) {\n        // named module does not exist, so create one\n        module = angular.module(moduleName, ['ui.router']);\n    }\n\n    module.directive('uiBreadcrumbs', ['$interpolate', '$state', '$transitions', function($interpolate, $state, $transitions) {\n            return {\n                restrict: 'E',\n                templateUrl: function(elem, attrs) {\n                    return attrs.templateUrl || templateUrl;\n                },\n                scope: {\n                    displaynameProperty: '@',\n                    abstractProxyProperty: '@?'\n                },\n                link: function(scope) {\n                    var transition;\n\n                    scope.breadcrumbs = [];\n                    if ($state.$current.name !== '') {\n                        updateBreadcrumbsArray();\n                    }\n                    $transitions.onSuccess({}, function(_transition) {\n                        transition = _transition;\n                        updateBreadcrumbsArray();\n                    });\n\n                    /**\n                     * Start with the current state and traverse up the path to build the\n                     * array of breadcrumbs that can be used in an ng-repeat in the template.\n                     */\n                    function updateBreadcrumbsArray() {\n                        var workingState;\n                        var displayName;\n                        var breadcrumbs = [];\n                        var currentState = $state.$current;\n\n                        while(currentState && currentState.name !== '') {\n                            workingState = getWorkingState(currentState);\n                            if (workingState) {\n                                displayName = getDisplayName(workingState);\n\n                                if (displayName !== false && !stateAlreadyInBreadcrumbs(workingState, breadcrumbs)) {\n                                    breadcrumbs.push({\n                                        displayName: displayName,\n                                        route: workingState.name\n                                    });\n                                }\n                            }\n                            currentState = currentState.parent;\n                        }\n                        breadcrumbs.reverse();\n                        scope.breadcrumbs = breadcrumbs;\n                    }\n\n                    /**\n                     * Get the state to put in the breadcrumbs array, taking into account that if the current state is abstract,\n                     * we need to either substitute it with the state named in the `scope.abstractProxyProperty` property, or\n                     * set it to `false` which means this breadcrumb level will be skipped entirely.\n                     * @param currentState\n                     * @returns {*}\n                     */\n                    function getWorkingState(currentState) {\n                        var proxyStateName;\n                        var workingState = currentState;\n                        if (currentState.abstract === true) {\n                            if (typeof scope.abstractProxyProperty !== 'undefined') {\n                                proxyStateName = getObjectValue(scope.abstractProxyProperty, currentState);\n                                if (proxyStateName) {\n                                    workingState = angular.copy($state.get(proxyStateName));\n                                    if (workingState) {\n                                        workingState.locals = currentState.locals;\n                                    }\n                                } else {\n                                    workingState = false;\n                                }\n                            } else {\n                                workingState = false;\n                            }\n                        }\n                        return workingState;\n                    }\n\n                    /**\n                     * Resolve the displayName of the specified state. Take the property specified by the `displayname-property`\n                     * attribute and look up the corresponding property on the state's config object. The specified string can be interpolated against any resolved\n                     * properties on the state config object, by using the usual {{ }} syntax.\n                     * @param currentState\n                     * @returns {*}\n                     */\n                    function getDisplayName(currentState) {\n                        var interpolationContext;\n                        var propertyReference;\n                        var displayName;\n\n                        if (!scope.displaynameProperty) {\n                            // if the displayname-property attribute was not specified, default to the state's name\n                            return currentState.name;\n                        }\n                        propertyReference = getObjectValue(scope.displaynameProperty, currentState);\n\n                        if (propertyReference === false) {\n                            return false;\n                        } else if (typeof propertyReference === 'undefined') {\n                            return currentState.name;\n                        } else {\n                            // use the $interpolate service to handle any bindings in the propertyReference string.\n                            // see https://ui-router.github.io/ng1/docs/latest/classes/transition.transition-1.html#getresolvetokens\n                            interpolationContext = {};\n                            transition.getResolveTokens().forEach(function(token){\n                                if ( angular.isString(token) && !token.startsWith('$') ) {\n                                    interpolationContext[token] = transition.injector().get(token);\n                                }\n                            });\n\n                            displayName = $interpolate(propertyReference)(interpolationContext);\n                            return displayName;\n                        }\n                    }\n\n                    /**\n                     * Given a string of the type 'object.property.property', traverse the given context (eg the current $state object) and return the\n                     * value found at that path.\n                     *\n                     * @param objectPath\n                     * @param context\n                     * @returns {*}\n                     */\n                    function getObjectValue(objectPath, context) {\n                        var i;\n                        var propertyArray = objectPath.split('.');\n                        var propertyReference = context;\n\n                        for (i = 0; i < propertyArray.length; i ++) {\n                            if (angular.isDefined(propertyReference[propertyArray[i]])) {\n                                propertyReference = propertyReference[propertyArray[i]];\n                            } else {\n                                // if the specified property was not found, default to the state's name\n                                return undefined;\n                            }\n                        }\n                        return propertyReference;\n                    }\n\n                    /**\n                     * Check whether the current `state` has already appeared in the current breadcrumbs array. This check is necessary\n                     * when using abstract states that might specify a proxy that is already there in the breadcrumbs.\n                     * @param state\n                     * @param breadcrumbs\n                     * @returns {boolean}\n                     */\n                    function stateAlreadyInBreadcrumbs(state, breadcrumbs) {\n                        var i;\n                        var alreadyUsed = false;\n                        for(i = 0; i < breadcrumbs.length; i++) {\n                            if (breadcrumbs[i].route === state.name) {\n                                alreadyUsed = true;\n                            }\n                        }\n                        return alreadyUsed;\n                    }\n                }\n            };\n        }]);\n})();\n","angular.module('pnc-ui-extras.templates').run(['$templateCache', function($templateCache) {$templateCache.put('pnc-ui-extras/combobox/combobox-option.template.html','<a ng-click=\"$ctrl.select(option)\" href>{{ $ctrl.getViewValue(option) }}</a>\\n');\n$templateCache.put('pnc-ui-extras/combobox/combobox.template.html','<style>\\n.px-search-clear {\\n  position: absolute;\\n  z-index: 100;\\n  right: 18px;\\n  top: 2px;\\n  height: 14px;\\n  margin: auto;\\n  color: inherit;\\n  cursor:  pointer;\\n}\\n\\n.px-search-clear > a:hover {\\n  background-color: inherit;\\n  color: inherit;\\n  cursor:  pointer;\\n}\\n\\n.px-combobox-dropdown {\\n  display: block;\\n}\\n.px-combobox-active a,a:hover {\\n  background-color: #def3ff;\\n}\\n.px-combobox-dropdown > .px-combobox-option a,a:hover {\\n  border-width: 0px;\\n}\\n\\n.px-combobox-dropdown > .px-combobobox-option {\\n  whitespace: normal !important;\\n  overflow-wrap: break-word !important;\\n}\\n\\n</style>\\n<div class=\"combobox-container\" ng-keydown=\"$event.stopPropagation()\">\\n  <div class=\"input-group\">\\n    <input type=\"text\" autocomplete=\"off\" id=\"combobox-{{::$id}}\" ng-keyup=\"$ctrl.onKey($event)\" placeholder=\"{{ ::$ctrl.placeholder }}\" class=\"combobox form-control\" ng-focus=\"$ctrl.openDropDown()\" ng-model=\"$ctrl.inputModel\" ng-model-options=\"$ctrl.modelOptions\" pf-focused=\"$ctrl.showDropDown\">\\n    <div class=\"px-search-clear\"><a class=\"px-search-clear\" ng-show=\"$ctrl.inputModel\" ng-click=\"$ctrl.clear()\"><span class=\"pficon pficon-close\"></span></a></div>\\n    <ul class=\"typeahead typeahead-long dropdown-menu px-combobox-dropdown\" ng-if=\"$ctrl.options.length > 0 && $ctrl.showDropDown\">\\n      <li ng-repeat=\"option in $ctrl.options\" ng-include=\"$ctrl.optionTemplateUrl\" class=\"px-combobox-option\" ng-mouseover=\"$ctrl.setHighlighted($index)\" ng-class=\"{ \\'px-combobox-active\\': $ctrl.isHighlighted($index) }\">\\n      </li>\\n      <li data-value=\"spinner\" class=\"text-center\" ng-show=\"$ctrl.isLoading()\">\\n        <span class=\"spinner spinner-xs spinner-inline\"></span>\\n      </li>\\n    </ul>\\n    <span class=\"input-group-addon dropdown-toggle\" ng-class=\"{ \\'dropup\\': $ctrl.showDropDown }\" data-dropdown=\"dropdown\" role=\"button\" ng-click=\"$ctrl.toggleDropDown()\">\\n      <span class=\"caret\"></span>\\n    </span>\\n  </div>\\n</div>\\n');\n$templateCache.put('pnc-ui-extras/ui-breadcrumbs/uiBreadcrumbs.tpl.html','<ol class=\"breadcrumb\">\\n  <li ng-repeat=\"crumb in breadcrumbs\"\\n      ng-class=\"{ active: $last }\"><a ui-sref=\"{{ crumb.route }}\" ng-if=\"!$last\">{{ crumb.displayName }}&nbsp;</a><span ng-show=\"$last\">{{ crumb.displayName }}</span>\\n  </li>\\n</ol>');}]);"]}