"use strict";function _classCallCheck(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}angular.module("pnc-ui-extras",["pnc-ui-extras.templates","pnc-ui-extras.combobox"]),angular.module("pnc-ui-extras.templates",[]),angular.module("pnc-ui-extras.combobox",["pnc-ui-extras.templates"]);var _createClass=function(){function e(e,o){for(var n=0;n<o.length;n++){var t=o[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(o,n,t){return n&&e(o.prototype,n),t&&e(o,t),o}}(),ComboboxController=function(){function e(o,n,t,i){_classCallCheck(this,e);var s="pnc-ui-extras/combobox/combobox-option.template.html";this.$log=o,this.$scope=n,this.$element=t,this.$timeout=i,this.options=[],this.showDropDown=!1,this.modelOptions={},this.optionTemplateUrl=this.optionTemplateUrl||s}return _createClass(e,[{key:"$onInit",value:function(){var e=this;if(this.ngModel){var o=this.editable===!0||"true"===this.editable;this.ngModel.$parsers.push(function(n){var t=e.getOptionFromViewValue(n);return angular.isDefined(t)?e.getModelValue(t):o?n:void 0}),this.ngModel.$validators.isValidOption=function(n){return angular.isDefined(e.getOptionFromModelValue(n))||o},this.ngModel.$render=function(){return e.inputModel=e.ngModel.$viewValue},this.ngModel.$formatters.push(function(n){var t=e.getViewValue(n);if(angular.isDefined(t))return t;var i=e.getOptionFromModelValue(n);return angular.isDefined(i)?e.getViewValue(i):o?n:void 0}),this.$scope.$watch(function(){return e.inputModel},function(){e.ngModel.$setViewValue(e.inputModel),e.loadOptions(e.inputModel)}),this.debounceMs&&(this.modelOptions.debounce=parseInt(this.debounceMs))}else this.loadOptions()}},{key:"$postLink",value:function(){var e=this;this.ngModel&&this.$timeout(function(){e.$element.find("input").on("blur",function(){e.$scope.$applyAsync(function(){return e.ngModel.$setTouched()})})})}},{key:"$onDestroy",value:function(){this.ngModel&&this.$element.find("input").off("blur")}},{key:"loadOptions",value:function(e){var o=this;return this.pxExpression.getOptions(e).then(function(e){return o.$log.debug("ComboboxController::loadOptions() scopeId = %d | options = %O",o.$scope.$id,e),o.$scope.$applyAsync(function(){return o.options=e}),e})}},{key:"getViewValue",value:function(e){return this.pxExpression.getViewValue(e)}},{key:"getModelValue",value:function(e){return this.pxExpression.getModelValue(e)}},{key:"getOptionFromViewValue",value:function(e){var o=this;if(angular.isArray(this.options))return this.options.find(function(n){return o.getViewValue(n)===e})}},{key:"getOptionFromModelValue",value:function(e){var o=this;if(angular.isArray(this.options))return this.options.find(function(n){return o.getModelValue(n)===e})}},{key:"setShowDropDown",value:function(e){var o=this;this.$scope.$applyAsync(function(){return o.showDropDown=e}),e||(this.highlighted=void 0)}},{key:"openDropDown",value:function(){this.setShowDropDown(!0)}},{key:"closeDropDown",value:function(){this.setShowDropDown(!1)}},{key:"toggleDropDown",value:function(){this.setShowDropDown(!this.showDropDown)}},{key:"select",value:function(e){this.inputModel=this.getViewValue(e),this.closeDropDown()}},{key:"clear",value:function(){this.inputModel=void 0,this.closeDropDown()}},{key:"setHighlighted",value:function(e){this.highlighted=e}},{key:"isHighlighted",value:function(e){return this.highlighted===e}},{key:"highlightNext",value:function(){if(this.showDropDown&&this.options&&!(this.options.length<1))if(angular.isUndefined(this.highlighted))this.setHighlighted(0);else{if(this.highlighted===this.options.length-1)return;this.setHighlighted(this.highlighted+1)}}},{key:"highlightPrevious",value:function(){!this.showDropDown||!this.options||this.options.length<1||angular.isUndefined(this.highlighted)||0===this.highlighted||this.setHighlighted(this.highlighted-1)}},{key:"onKey",value:function(e){switch(e.stopPropagation(),e.preventDefault(),e.key){case"ArrowDown":this.showDropDown?this.highlightNext():this.openDropDown();break;case"ArrowUp":this.highlightPrevious();break;case"Enter":this.select(this.options[this.highlighted]);break;case"Escape":this.closeDropDown()}}}]),e}();ComboboxController.$inject=["$log","$scope","$element","$timeout"];var pxCombobox={templateUrl:"pnc-ui-extras/combobox/combobox.template.html",controller:ComboboxController,require:{pxExpression:"?pxExpression",ngModel:"?ngModel"},bindings:{placeholder:"@",editable:"<",debounceMs:"@",optionTemplateUrl:"@"}};angular.module("pnc-ui-extras.combobox").component("pxCombobox",pxCombobox);var pxExpressionParser=function(e){var o=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(n){var t=n.match(o);if(!t)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+n+'".');return{itemName:t[3],source:e(t[4]),viewMapper:e(t[2]||t[1]),modelMapper:e(t[1])}}}};pxExpressionParser.$inject=["$parse"],angular.module("pnc-ui-extras.combobox").factory("pxExpressionParser",pxExpressionParser);var _createClass=function(){function e(e,o){for(var n=0;n<o.length;n++){var t=o[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(o,n,t){return n&&e(o.prototype,n),t&&e(o,t),o}}(),PxExpressionController=function(){function e(o,n,t,i,s){_classCallCheck(this,e),this.$log=o,this.$q=n,this.$scope=t,this.$attrs=i,this.pxExpressionParser=s,this.parsed=s.parse(i.pxExpression),this.$log.debug("PxExpressionController::constructor() with scope id = "+t.$id),this.$log.debug("px-expression = "+i.pxExpression,t)}return _createClass(e,[{key:"getViewValue",value:function(e){var o={};return o[this.parsed.itemName]=e,this.parsed.viewMapper(this.$scope,o)}},{key:"getModelValue",value:function(e){var o={};return o[this.parsed.itemName]=e,this.parsed.modelMapper(this.$scope,o)}},{key:"getOptions",value:function(e){return this.$q.when(this.parsed.source(this.$scope,{$viewValue:e}))}}]),e}();PxExpressionController.$inject=["$log","$q","$scope","$attrs","pxExpressionParser"];var pxExpression=function(){return{restrict:"A",scope:!1,controller:PxExpressionController}};angular.module("pnc-ui-extras.combobox").directive("pxExpression",pxExpression),angular.module("pnc-ui-extras.templates").run(["$templateCache",function(e){e.put("pnc-ui-extras/combobox/combobox-option.template.html",'<a ng-click="$ctrl.select(option)" href>{{ $ctrl.getViewValue(option) }}</a>\n'),e.put("pnc-ui-extras/combobox/combobox.template.html",'<style>\n.px-search-clear {\n  position: absolute;\n  z-index: 100;\n  right: 18px;\n  top: 2px;\n  height: 14px;\n  margin: auto;\n  color: inherit;\n  cursor:  pointer;\n}\n\n.px-search-clear > a:hover {\n  background-color: inherit;\n  color: inherit;\n  cursor:  pointer;\n}\n\n.px-combobox-dropdown {\n  display: block;\n}\n.px-combobox-active a,a:hover {\n  background-color: #def3ff;\n}\n.px-combobox-dropdown > .px-combobox-option a,a:hover {\n  border-width: 0px;\n}\n\n.px-combobox-dropdown > .px-combobobox-option {\n  whitespace: normal !important;\n  overflow-wrap: break-word !important;\n}\n\n</style>\n<div class="combobox-container" ng-keydown="$event.stopPropagation()">\n  <div class="input-group">\n    <input type="text" autocomplete="off" id="combobox-{{::$id}}" ng-keyup="$ctrl.onKey($event)" placeholder="{{ ::$ctrl.placeholder }}" class="combobox form-control" ng-focus="$ctrl.openDropDown()" ng-model="$ctrl.inputModel" ng-model-options="$ctrl.modelOptions" pf-focused="$ctrl.showDropDown">\n    <div class="px-search-clear"><a class="px-search-clear" ng-show="$ctrl.inputModel" ng-click="$ctrl.clear()"><span class="pficon pficon-close"></span></a></div>\n    <ul class="typeahead typeahead-long dropdown-menu px-combobox-dropdown" ng-if="$ctrl.options.length > 0 && $ctrl.showDropDown">\n      <li ng-repeat="option in $ctrl.options" ng-include="$ctrl.optionTemplateUrl" class="px-combobox-option" ng-mouseover="$ctrl.setHighlighted($index)" ng-class="{ \'px-combobox-active\': $ctrl.isHighlighted($index) }">\n      </li>\n      <li data-value="spinner" class="text-center" ng-show="$ctrl.isLoading()">\n        <span class="spinner spinner-xs spinner-inline"></span>\n      </li>\n    </ul>\n    <span class="input-group-addon dropdown-toggle" ng-class="{ \'dropup\': $ctrl.showDropDown }" data-dropdown="dropdown" role="button" ng-click="$ctrl.toggleDropDown()">\n      <span class="caret"></span>\n    </span>\n  </div>\n</div>\n')}]);
//# sourceMappingURL=pnc-ui-extras.min.js.map
